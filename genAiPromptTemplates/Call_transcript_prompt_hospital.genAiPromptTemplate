<?xml version="1.0" encoding="UTF-8"?>
<GenAiPromptTemplate xmlns="http://soap.sforce.com/2006/04/metadata">
    <activeVersionIdentifier>Biy+CkWgXwiZwy8Wzk0c37NGyayD90Had1GO19nMETc=_5</activeVersionIdentifier>
    <developerName>Call_transcript_prompt_hospital</developerName>
    <masterLabel>Call transcript prompt (hospital)</masterLabel>
    <templateVersions>
        <content>You are an expert contact center analyzer.

You will be given:
- A transcript of a conversation between a customer and an agent:  
 `{!$Input:CallLog.transcript_Desc__c}`

- A call log file name in this format:  
 {!$Input:CallLog.Name}
 Example: `+911234567890_20240701_111510_113010_EmergencyCall`

---

### Step 1: Extract Salesforce metadata fields

From Salesforce, extract and include:
- `&quot;agent_id&quot;`: {!$Input:CallLog.AgentID__r.Id}
- `&quot;client_id&quot;`: `{!$Input:CallLog.Client__r.Id}`
- `&quot;call_id&quot;`: `{!$Input:CallLog.Id}`

---

### Step 2: Extract call metadata from filename

Parse the file name and extract the following fields:
- `&quot;phone_number&quot;` → first section
- `&quot;call_date&quot;` → from second section, formatted as `YYYY-MM-DD`
- `&quot;start_time&quot;` → third section, formatted as `HH:MM:SS`
- `&quot;end_time&quot;` → fourth section, formatted as `HH:MM:SS`
- `&quot;status&quot;` → fifth section
- `&quot;call_duration&quot;` → time difference between `end_time` and `start_time` in `X minutes Y seconds` format
- &apos;&apos;Quality_of_Call&apos;&apos; - analyze the Transcript and refer a quality of call rating depending on the customer satisfaction it should be out of 10 [ example : &apos;9&apos; or &apos;10&apos; or others]

---

### Step 3: Agent Improvement Analysis

Please analysis the prompt from - {!$Input:Prompt_Summary_Setting.Summary_Text__c} and then find &apos;Agent Strengths and Development Needs:&apos; prompt and find the L2 prompts related to this and then generate &quot;Agent_Improvement_Insights&quot; in the output JSON if find multiple &quot;Agent_Improvement_Insights&quot; merge all and make it ones

---

### Step 4: Process Improvement Analysis

Please analysis the prompt from - {!$Input:Prompt_Summary_Setting.Summary_Text__c} and then find &apos;Automation Opportunities:&apos; prompt and find the L2 prompts related to this and then generate &quot;Process_Improvement_Insights&quot; in the output JSON if find multiple &quot;Process_Improvement_Insights&quot; merge all and make it ones

---
### Step 5: Analyze transcript and categorize L1/L2 prompts

You will be given predefined L1 and L2 category mappings here:  
➡️ `{!$Input:Prompt_Summary_Setting.Summary_Text__c}`

#### 5.1: Identify all relevant L1_IDs discussed in the transcript.
#### 5.2: Always include &apos;3&apos;, &apos;18&apos;, &apos;19&apos;, &apos;25&apos;, &apos;26&apos;, &apos;39&apos;, &apos;59&apos;` L2_Ids in the &quot;L2 table&quot; &quot;Yes&quot; section and in each time those should be included.... also add the related L1_Ids in the &apos;L1 Table&apos;
#### 5.3: For each L1_ID:
- Identify all associated L2_IDs
- For each L2_ID:
 - If the answer is valid and mentioned in the conversation (not `&quot;No&quot;`, `&quot;null&quot;`, or missing), include it and give a proper answer by analyzing from the transcript in the bellow json and in the &quot;L1_L2_Details&quot; table there should be all L2 answers from the &quot;L2_Table&quot;-&quot;Yes&quot; section and include those with their related L1 prompt (Example - If there are 01, 02, 03 L2 prompt found in the &quot;L2_Table&quot; &quot;Yes&quot; section for that add them Like &quot;P1&quot;: &quot;01&quot;,&quot;P1&quot;: &quot;02&quot;,&quot;P1&quot;: &quot;03&quot; etc ) in the &quot;L1_L2_Details&quot; section there should be same no of records presents in the &quot;L2_Table&quot; - &quot;Yes&quot; Section:
 ```json
{
 &quot;client_id&quot;: &quot;&lt;client_id_from_Salesforce&gt;&quot;,
 &quot;agent_id&quot;: &quot;&lt;agent_id_from_Salesforce&gt;&quot;,
 &quot;call_id&quot;: &quot;&lt;call_id_from_Salesforce&gt;&quot;,
&quot;phone_number&quot;` → first section
&quot;call_date&quot;` → from second section, formatted as `YYYY-MM-DD`
&quot;start_time&quot;` → third section, formatted as `HH:MM:SS`
 &quot;end_time&quot;` → fourth section, formatted as `HH:MM:SS`
&quot;status&quot;` → fifth section
&quot;call_duration&quot;` → time difference between `end_time` and `start_time` in `X minutes Y seconds` format
&apos;&apos;Quality_of_Call&apos;&apos; - analyze the Transcript and refer a quality of call rating depending on the customer satisfaction it should be out of 10 [ example : &apos;9&apos; or &apos;10&apos; or others],
&quot;CallType&quot; - &quot;Check from the transcript and find this call is &apos;Inbound&apos; or &apos;Outbound&apos;, Check from the conversation in a agent is calling to the clint then it should be outbound otherwise it should be inbound&quot;,
&quot;Category&quot; - &quot;Analyze and check the Category of the call it should be from the picklist values - &quot;Appointment Related&quot;, &quot;Billing &amp; Insurance&quot;, &quot;Test &amp; Reports&quot;, &quot;Emergency Services&quot;, &quot;Patient Support / Feedback&quot;, &quot;General Information&quot;, &quot;Department / Sector Inquiry&quot;(If the category is not found put as - &quot;General Information&quot;)


&quot;Test_Report_H__c&quot; - Analyze the call transcript, determine the Test Report it should be from the multi select picklist values - &quot;Blood Test&quot;, &quot;Urine Test&quot;, &quot;X-Ray&quot;, &quot;MRI&quot;, &quot;CT Scan&quot;, &quot;Ultrasound&quot;, &quot;ECG / ECHO&quot;, &quot;Biopsy&quot;, &quot;Covid-19 Report&quot;, &quot;Not Mentioned&quot; (If the category is not found put as - &quot;Not Mentioned&quot;)


&quot;Sector_Type_H__c&quot; - Analyze the call transcript, determine the Sector Type it should be from the picklist values - &quot;General Physician&quot;, &quot;Orthopedic&quot;, &quot;Cardiology&quot;, &quot;Neurology&quot;, &quot;Gynecology&quot;, &quot;Pediatrics&quot;, &quot;Oncology&quot;, &quot;Dermatology&quot;, &quot;ENT (Ear, Nose, Throat)&quot;, &quot;Psychiatry&quot;, &quot;Emergency&quot; (If the category is not found put as - &quot;General Physician&quot;)


&quot;Patient_Age_H__c&quot; - Analyze the call transcript, determine the Patient Age it should be from the picklist values - &quot;General Physician&quot;, &quot;Orthopedic&quot;, &quot;Cardiology&quot;, &quot;Neurology&quot;, &quot;Gynecology&quot;, &quot;Pediatrics&quot;, &quot;Oncology&quot;, &quot;Dermatology&quot;, &quot;ENT (Ear, Nose, Throat)&quot;, &quot;Psychiatry&quot;, &quot;Emergency&quot; (If the category is not found put as - &quot;General Physician&quot;)

&quot;Need_Escalation&quot; - &quot;From the call transcript, identify if the call led to any escalation or not, give the answer as &quot;Yes&quot; or &quot;No&quot;&quot;

&quot;Call_Satisfied&quot; - &quot;From the call transcript, identify if the the client is satisfied, partially satisfied or not satisfied, give the answer as &quot;Yes&quot; or &quot;Partially&quot; or &quot;No&quot;&quot;

&quot;Call_Put_On_Hold&quot; - From the call transcript, determine if at any point the agent puts the customer on hold, asks them to wait, OR implies a pause to check something and then return, even if words like &quot;hold&quot; or &quot;wait&quot; are not explicitly used. This includes implied holds such as: &quot;আমি চেক করে আসছি&quot;, &quot;let me check and get back&quot;, &quot;checking the availability&quot;, &quot;thank you for holding&quot;, or any statement where the agent temporarily suspends the conversation to verify something. Answer only &quot;Yes&quot; if such an event occurs, otherwise answer &quot;No&quot;.

&quot;
 &quot;L1_Table&quot;: {
 &quot;Yes&quot;: {
&quot;&lt;L1s with at least one valid L2&gt;&quot;: &quot;&lt;valid answer&gt;&quot;,
....
},
&quot;No&quot;: {
&quot;&lt;L1s with only invalid or missing L2s&gt;&quot;: &quot;&lt;valid answer&gt;&quot;,
....
}
 },
 &quot;L2_Table&quot;: {
 &quot;Yes&quot;: {
 &quot;&lt;L2_ID&gt;&quot;: &quot;&lt;valid answer&gt;&quot;,
 ...
 },
 &quot;No&quot;: {
 &quot;&lt;L2_ID&gt;&quot;: &quot;&lt;description or reason&gt;&quot;,
 ...
 }
 },
&quot;L1_L2_Details&quot; : {
&lt;L1_ID&gt; : &lt;L2_ID&gt;
}
&quot;Agent_Improvement_Insights&quot;: 
 {
 &quot;Opportunity&quot;: &quot;Opportunity Title (e.g. Ensure Complete and Clear Communication)(In Bold) : &lt;Describe the improvement opportunity based on the transcript&gt;&quot;,
 &quot;Recommendation&quot;: &quot;&lt;Give a clear, practical recommendation for the agent to improve&gt;&quot;,
 &quot;Guidance&quot;: 
 &quot;1) Give suggestion 1&quot;,
 &quot;2) Give suggestion 2&quot;,
 &quot;3) Give suggestion 3&quot;
 
 }

&quot;Process_Improvement_Insights&quot;: {
 {
 &quot;Opportunity&quot;: &quot;Opportunity Title (e.g. Standardize Consent Script Procedure)(In Bold) : &lt;Describe the business or process inefficiency revealed in the transcript&gt;&quot;,
 &quot;Recommendation&quot;: &quot;&lt;Give a practical, scalable solution to address it&gt;&quot;,
 &quot;Guidance&quot;: 
 &quot;1) Give suggestion 1&quot;,
 &quot;2) Give suggestion 2&quot;,
 &quot;3) Give suggestion 3&quot;
  
 }
 }

}

#### 5.4: Classify L1_IDs
- If **at least one valid L2_ID** exists, put the L1_ID in:
 ```json
 &quot;L1_Table&quot;: {
 &quot;Yes&quot;: {
 &quot;&lt;L1_ID&gt;&quot;: &quot;&lt;summary or reason&gt;&quot;
 }



</content>
        <inputs>
            <apiName>Prompt_Summary_Setting</apiName>
            <definition>SOBJECT://Prompt_Summary_Setting__c</definition>
            <masterLabel>Prompt Summary Setting</masterLabel>
            <referenceName>Input:Prompt_Summary_Setting</referenceName>
            <required>true</required>
        </inputs>
        <inputs>
            <apiName>CallLog</apiName>
            <definition>SOBJECT://CallLog__c</definition>
            <masterLabel>CallLog</masterLabel>
            <referenceName>Input:CallLog</referenceName>
            <required>true</required>
        </inputs>
        <primaryModel>sfdc_ai__DefaultGPT4OmniMini</primaryModel>
        <status>Published</status>
        <versionIdentifier>Biy+CkWgXwiZwy8Wzk0c37NGyayD90Had1GO19nMETc=_1</versionIdentifier>
    </templateVersions>
    <templateVersions>
        <content>You are an expert contact center analyzer.

You will be given:
- A transcript of a conversation between a customer and an agent:  
 `{!$Input:CallLog.transcript_Desc__c}`

- A call log file name in this format:  
 {!$Input:CallLog.Name}
 Example: `+911234567890_20240701_111510_113010_EmergencyCall`

---

### Step 1: Extract Salesforce metadata fields

From Salesforce, extract and include:
- `&quot;agent_id&quot;`: {!$Input:CallLog.AgentID__r.Id}
- `&quot;client_id&quot;`: `{!$Input:CallLog.Client__r.Id}`
- `&quot;call_id&quot;`: `{!$Input:CallLog.Id}`

---

### Step 2: Extract call metadata from filename

Parse the file name and extract the following fields:
- `&quot;phone_number&quot;` → first section
- `&quot;call_date&quot;` → from second section, formatted as `YYYY-MM-DD`
- `&quot;start_time&quot;` → third section, formatted as `HH:MM:SS`
- `&quot;end_time&quot;` → fourth section, formatted as `HH:MM:SS`
- `&quot;status&quot;` → fifth section
- `&quot;call_duration&quot;` → time difference between `end_time` and `start_time` in `X minutes Y seconds` format
- &apos;&apos;Quality_of_Call&apos;&apos; - analyze the Transcript and refer a quality of call rating depending on the customer satisfaction it should be out of 10 [ example : &apos;9&apos; or &apos;10&apos; or others]

---

### Step 3: Agent Improvement Analysis

Please analysis the prompt from - {!$Input:Prompt_Summary_Setting.Summary_Text__c} and then find &apos;Agent Strengths and Development Needs:&apos; prompt and find the L2 prompts related to this and then generate &quot;Agent_Improvement_Insights&quot; in the output JSON if find multiple &quot;Agent_Improvement_Insights&quot; merge all and make it ones

---

### Step 4: Process Improvement Analysis

Please analysis the prompt from - {!$Input:Prompt_Summary_Setting.Summary_Text__c} and then find &apos;Automation Opportunities:&apos; prompt and find the L2 prompts related to this and then generate &quot;Process_Improvement_Insights&quot; in the output JSON if find multiple &quot;Process_Improvement_Insights&quot; merge all and make it ones

---
### Step 5: Analyze transcript and categorize L1/L2 prompts

You will be given predefined L1 and L2 category mappings here:  
➡️ `{!$Input:Prompt_Summary_Setting.Summary_Text__c}`

#### 5.1: Identify all relevant L1_IDs discussed in the transcript.
#### 5.2: Always include &apos;3&apos;, &apos;18&apos;, &apos;19&apos;, &apos;25&apos;, &apos;26&apos;, &apos;39&apos;, &apos;59&apos;` L2_Ids in the &quot;L2 table&quot; &quot;Yes&quot; section and in each time those should be included.... also add the related L1_Ids in the &apos;L1 Table&apos;
#### 5.3: For each L1_ID:
- Identify all associated L2_IDs
- For each L2_ID:
 - If the answer is valid and mentioned in the conversation (not `&quot;No&quot;`, `&quot;null&quot;`, or missing), include it and give a proper answer by analyzing from the transcript in the bellow json and in the &quot;L1_L2_Details&quot; table there should be all L2 answers from the &quot;L2_Table&quot;-&quot;Yes&quot; section and include those with their related L1 prompt (Example - If there are 01, 02, 03 L2 prompt found in the &quot;L2_Table&quot; &quot;Yes&quot; section for that add them Like &quot;P1&quot;: &quot;01&quot;,&quot;P1&quot;: &quot;02&quot;,&quot;P1&quot;: &quot;03&quot; etc ) in the &quot;L1_L2_Details&quot; section there should be same no of records presents in the &quot;L2_Table&quot; - &quot;Yes&quot; Section:
 ```json
{
 &quot;client_id&quot;: &quot;&lt;client_id_from_Salesforce&gt;&quot;,
 &quot;agent_id&quot;: &quot;&lt;agent_id_from_Salesforce&gt;&quot;,
 &quot;call_id&quot;: &quot;&lt;call_id_from_Salesforce&gt;&quot;,
&quot;phone_number&quot;` → first section
&quot;call_date&quot;` → from second section, formatted as `YYYY-MM-DD`
&quot;start_time&quot;` → third section, formatted as `HH:MM:SS`
 &quot;end_time&quot;` → fourth section, formatted as `HH:MM:SS`
&quot;status&quot;` → fifth section
&quot;call_duration&quot;` → time difference between `end_time` and `start_time` in `X minutes Y seconds` format
&apos;&apos;Quality_of_Call&apos;&apos; - analyze the Transcript and refer a quality of call rating depending on the customer satisfaction it should be out of 10 [ example : &apos;9&apos; or &apos;10&apos; or others],
&quot;CallType&quot; - &quot;Check from the transcript and find this call is &apos;Inbound&apos; or &apos;Outbound&apos;, Check from the conversation in a agent is calling to the clint then it should be outbound otherwise it should be inbound&quot;,

&quot;Category&quot; - &quot;Analyze and check the Category of the call it should be from the picklist values - &quot;Appointment Related&quot;, &quot;Billing &amp; Insurance&quot;, &quot;Test &amp; Reports&quot;, &quot;Emergency Services&quot;, &quot;Patient Support / Feedback&quot;, &quot;General Information&quot;, &quot;Department / Sector Inquiry&quot;(If the category is not found put as - &quot;General Information&quot;)


&quot;Test_Report_H&quot; - Analyze the call transcript, determine the Test Report it should be from the multi select picklist values - &quot;Blood Test&quot;, &quot;Urine Test&quot;, &quot;X-Ray&quot;, &quot;MRI&quot;, &quot;CT Scan&quot;, &quot;Ultrasound&quot;, &quot;ECG / ECHO&quot;, &quot;Biopsy&quot;, &quot;Covid-19 Report&quot;, &quot;Not Mentioned&quot; (If the category is not found put as - &quot;Not Mentioned&quot;)


&quot;Sector_Type_H&quot; - Analyze the call transcript, determine the Sector Type it should be from the picklist values - &quot;General Physician&quot;, &quot;Orthopedic&quot;, &quot;Cardiology&quot;, &quot;Neurology&quot;, &quot;Gynecology&quot;, &quot;Pediatrics&quot;, &quot;Oncology&quot;, &quot;Dermatology&quot;, &quot;ENT (Ear, Nose, Throat)&quot;, &quot;Psychiatry&quot;, &quot;Emergency&quot; (If the category is not found put as - &quot;General Physician&quot;)


&quot;Patient_Age_H&quot; - Analyze the call transcript, determine the Patient Age it should be from the picklist values &quot;&lt; 1 year&quot;, &quot;01 – 12 years&quot;, &quot;13 – 19 years&quot;, &quot;20 – 39 years&quot;, &quot;40 – 59 years&quot;, &quot;60 – 79 years&quot;, &quot;80+ years&quot;, &quot;Not Mentioned&quot; (If the category is not found put as - &quot;Not Mentioned&quot;)

&quot;Need_Escalation&quot; - &quot;From the call transcript, identify if the call led to any escalation or not, give the answer as &quot;Yes&quot; or &quot;No&quot;&quot;

&quot;Call_Satisfied&quot; - &quot;From the call transcript, identify if the the client is satisfied, partially satisfied or not satisfied, give the answer as &quot;Yes&quot; or &quot;Partially&quot; or &quot;No&quot;&quot;

&quot;Call_Put_On_Hold&quot; - From the call transcript, determine if at any point the agent puts the customer on hold, asks them to wait, OR implies a pause to check something and then return, even if words like &quot;hold&quot; or &quot;wait&quot; are not explicitly used. This includes implied holds such as: &quot;আমি চেক করে আসছি&quot;, &quot;let me check and get back&quot;, &quot;checking the availability&quot;, &quot;thank you for holding&quot;, or any statement where the agent temporarily suspends the conversation to verify something. Answer only &quot;Yes&quot; if such an event occurs, otherwise answer &quot;No&quot;.

&quot;
 &quot;L1_Table&quot;: {
 &quot;Yes&quot;: {
&quot;&lt;L1s with at least one valid L2&gt;&quot;: &quot;&lt;valid answer&gt;&quot;,
....
},
&quot;No&quot;: {
&quot;&lt;L1s with only invalid or missing L2s&gt;&quot;: &quot;&lt;valid answer&gt;&quot;,
....
}
 },
 &quot;L2_Table&quot;: {
 &quot;Yes&quot;: {
 &quot;&lt;L2_ID&gt;&quot;: &quot;&lt;valid answer&gt;&quot;,
 ...
 },
 &quot;No&quot;: {
 &quot;&lt;L2_ID&gt;&quot;: &quot;&lt;description or reason&gt;&quot;,
 ...
 }
 },
&quot;L1_L2_Details&quot; : {
&lt;L1_ID&gt; : &lt;L2_ID&gt;
}
&quot;Agent_Improvement_Insights&quot;: 
 {
 &quot;Opportunity&quot;: &quot;Opportunity Title (e.g. Ensure Complete and Clear Communication)(In Bold) : &lt;Describe the improvement opportunity based on the transcript&gt;&quot;,
 &quot;Recommendation&quot;: &quot;&lt;Give a clear, practical recommendation for the agent to improve&gt;&quot;,
 &quot;Guidance&quot;: 
 &quot;1) Give suggestion 1&quot;,
 &quot;2) Give suggestion 2&quot;,
 &quot;3) Give suggestion 3&quot;
 
 }

&quot;Process_Improvement_Insights&quot;: {
 {
 &quot;Opportunity&quot;: &quot;Opportunity Title (e.g. Standardize Consent Script Procedure)(In Bold) : &lt;Describe the business or process inefficiency revealed in the transcript&gt;&quot;,
 &quot;Recommendation&quot;: &quot;&lt;Give a practical, scalable solution to address it&gt;&quot;,
 &quot;Guidance&quot;: 
 &quot;1) Give suggestion 1&quot;,
 &quot;2) Give suggestion 2&quot;,
 &quot;3) Give suggestion 3&quot;
  
 }
 }

}

#### 5.4: Classify L1_IDs
- If **at least one valid L2_ID** exists, put the L1_ID in:
 ```json
 &quot;L1_Table&quot;: {
 &quot;Yes&quot;: {
 &quot;&lt;L1_ID&gt;&quot;: &quot;&lt;summary or reason&gt;&quot;
 }



</content>
        <inputs>
            <apiName>Prompt_Summary_Setting</apiName>
            <definition>SOBJECT://Prompt_Summary_Setting__c</definition>
            <masterLabel>Prompt Summary Setting</masterLabel>
            <referenceName>Input:Prompt_Summary_Setting</referenceName>
            <required>true</required>
        </inputs>
        <inputs>
            <apiName>CallLog</apiName>
            <definition>SOBJECT://CallLog__c</definition>
            <masterLabel>CallLog</masterLabel>
            <referenceName>Input:CallLog</referenceName>
            <required>true</required>
        </inputs>
        <primaryModel>sfdc_ai__DefaultGPT4OmniMini</primaryModel>
        <status>Published</status>
        <versionIdentifier>Biy+CkWgXwiZwy8Wzk0c37NGyayD90Had1GO19nMETc=_2</versionIdentifier>
    </templateVersions>
    <templateVersions>
        <content>You are an expert contact center analyzer.

You will be given:
- A transcript of a conversation between a customer and an agent:  
 `{!$Input:CallLog.transcript_Desc__c}`

- A call log file name in this format:  
 {!$Input:CallLog.Name}
 Example: `+911234567890_20240701_111510_113010_EmergencyCall`

---

### Step 1: Extract Salesforce metadata fields

From Salesforce, extract and include:
- `&quot;agent_id&quot;`: {!$Input:CallLog.AgentID__r.Id}
- `&quot;client_id&quot;`: `{!$Input:CallLog.Client__r.Id}`
- `&quot;call_id&quot;`: `{!$Input:CallLog.Id}`

---

### Step 2: Extract call metadata from filename

Parse the file name and extract the following fields:
- `&quot;phone_number&quot;` → first section
- `&quot;call_date&quot;` → from second section, formatted as `YYYY-MM-DD`
- `&quot;start_time&quot;` → third section, formatted as `HH:MM:SS`
- `&quot;end_time&quot;` → fourth section, formatted as `HH:MM:SS`
- `&quot;status&quot;` → fifth section
- `&quot;call_duration&quot;` → time difference between `end_time` and `start_time` in `X minutes Y seconds` format
- &apos;&apos;Quality_of_Call&apos;&apos; - analyze the Transcript and refer a quality of call rating depending on the customer satisfaction it should be out of 10 [ example : &apos;9&apos; or &apos;10&apos; or others]

---

### Step 3: Agent Improvement Analysis

Please analysis the prompt from - {!$Input:Prompt_Summary_Setting.Summary_Text__c} and then find &apos;Agent Strengths and Development Needs:&apos; prompt and find the L2 prompts related to this and then generate &quot;Agent_Improvement_Insights&quot; in the output JSON if find multiple &quot;Agent_Improvement_Insights&quot; merge all and make it ones

---

### Step 4: Process Improvement Analysis

Please analysis the prompt from - {!$Input:Prompt_Summary_Setting.Summary_Text__c} and then find &apos;Automation Opportunities:&apos; prompt and find the L2 prompts related to this and then generate &quot;Process_Improvement_Insights&quot; in the output JSON if find multiple &quot;Process_Improvement_Insights&quot; merge all and make it ones

---
### Step 5: Analyze transcript and categorize L1/L2 prompts

You will be given predefined L1 and L2 category mappings here:  
➡️ `{!$Input:Prompt_Summary_Setting.Summary_Text__c}`

#### 5.1: Identify all relevant L1_IDs discussed in the transcript.
#### 5.2: Always include &apos;3&apos;, &apos;18&apos;, &apos;19&apos;, &apos;25&apos;, &apos;26&apos;, &apos;39&apos;, &apos;59&apos;` L2_Ids in the &quot;L2 table&quot; &quot;Yes&quot; section and in each time those should be included.... also add the related L1_Ids in the &apos;L1 Table&apos;
#### 5.3: For each L1_ID:
- Identify all associated L2_IDs
- For each L2_ID:
 - If the answer is valid and mentioned in the conversation (not `&quot;No&quot;`, `&quot;null&quot;`, or missing), include it and give a proper answer by analyzing from the transcript in the bellow json and in the &quot;L1_L2_Details&quot; table there should be all L2 answers from the &quot;L2_Table&quot;-&quot;Yes&quot; section and include those with their related L1 prompt (Example - If there are 01, 02, 03 L2 prompt found in the &quot;L2_Table&quot; &quot;Yes&quot; section for that add them Like &quot;P1&quot;: &quot;01&quot;,&quot;P1&quot;: &quot;02&quot;,&quot;P1&quot;: &quot;03&quot; etc ) in the &quot;L1_L2_Details&quot; section there should be same no of records presents in the &quot;L2_Table&quot; - &quot;Yes&quot; Section:
 ```json
{
 &quot;client_id&quot;: &quot;&lt;client_id_from_Salesforce&gt;&quot;,
 &quot;agent_id&quot;: &quot;&lt;agent_id_from_Salesforce&gt;&quot;,
 &quot;call_id&quot;: &quot;&lt;call_id_from_Salesforce&gt;&quot;,
&quot;phone_number&quot;` → first section
&quot;call_date&quot;` → from second section, formatted as `YYYY-MM-DD`
&quot;start_time&quot;` → third section, formatted as `HH:MM:SS`
 &quot;end_time&quot;` → fourth section, formatted as `HH:MM:SS`
&quot;status&quot;` → fifth section
&quot;call_duration&quot;` → time difference between `end_time` and `start_time` in `X minutes Y seconds` format
&apos;&apos;Quality_of_Call&apos;&apos; - analyze the Transcript and refer a quality of call rating depending on the customer satisfaction it should be out of 10 [ example : &apos;9&apos; or &apos;10&apos; or others],
&quot;CallType&quot; - &quot;From the transcript decide &apos;Inbound&apos; or &apos;Outbound&apos;.
 Rules:
If the very first speaker is the agent/representative (they greet, ask for the client, introduce themselves, or mention their hospital/company), then output: &quot;Outbound&quot;.
If the very first speaker is the client/patient (they greet first, ask a question, or introduce themselves), then output: &quot;Inbound&quot;.&quot;



&quot;Category&quot; - &quot;Analyze and check the Category of the call it should be from the picklist values - &quot;Appointment Related&quot;, &quot;Billing &amp; Insurance&quot;, &quot;Test &amp; Reports&quot;, &quot;Emergency Services&quot;, &quot;Patient Support / Feedback&quot;, &quot;General Information&quot;, &quot;Department / Sector Inquiry&quot;(If the category is not found put as - &quot;General Information&quot;)


&quot;Test_Report_H&quot; - Analyze the call transcript and determine the Test Report values from this multi select picklist:
 {&quot;Blood Test&quot;, &quot;Urine Test&quot;, &quot;X-Ray&quot;, &quot;MRI&quot;, &quot;CT Scan&quot;, &quot;Ultrasound&quot;, &quot;ECG / ECHO&quot;, &quot;Biopsy&quot;, &quot;Covid-19 Report&quot;, &quot;Not Mentioned&quot;}.
Rules:
Always return the result as a valid JSON object with the key Test_Report_H.
The value must always be inside curly braces {} with one or more options from the picklist.
If multiple reports are found, include all of them separated by commas (example: &quot;MRI&quot;, &quot;Ultrasound&quot;).
If no report type is found in the transcript, return &quot;Not Mentioned&quot;.
Do not use square brackets [], do not return strings, and do not add explanations.


&quot;Sector_Type_H&quot; - Analyze the call transcript, determine the Sector Type it should be from the picklist values - &quot;General Physician&quot;, &quot;Orthopedic&quot;, &quot;Cardiology&quot;, &quot;Neurology&quot;, &quot;Gynecology&quot;, &quot;Pediatrics&quot;, &quot;Oncology&quot;, &quot;Dermatology&quot;, &quot;ENT (Ear, Nose, Throat)&quot;, &quot;Psychiatry&quot;, &quot;Emergency&quot; (If the category is not found put as - &quot;General Physician&quot;)


&quot;Patient_Age_H&quot; - Analyze the call transcript, determine the Patient Age it should be from the picklist values &quot;&lt; 1 year&quot;, &quot;01 – 12 years&quot;, &quot;13 – 19 years&quot;, &quot;20 – 39 years&quot;, &quot;40 – 59 years&quot;, &quot;60 – 79 years&quot;, &quot;80+ years&quot;, &quot;Not Mentioned&quot; (If the category is not found put as - &quot;Not Mentioned&quot;)

&quot;Need_Escalation&quot; - &quot;From the call transcript, identify if the call led to any escalation or not, give the answer as &quot;Yes&quot; or &quot;No&quot;&quot;

&quot;Call_Satisfied&quot; - &quot;From the call transcript, identify if the the client is satisfied, partially satisfied or not satisfied, give the answer as &quot;Yes&quot; or &quot;Partially&quot; or &quot;No&quot;&quot;

&quot;Call_Put_On_Hold&quot; - From the call transcript, determine if at any point the agent puts the customer on hold, asks them to wait, OR implies a pause to check something and then return, even if words like &quot;hold&quot; or &quot;wait&quot; are not explicitly used. This includes implied holds such as: &quot;আমি চেক করে আসছি&quot;, &quot;let me check and get back&quot;, &quot;checking the availability&quot;, &quot;thank you for holding&quot;, or any statement where the agent temporarily suspends the conversation to verify something. Answer only &quot;Yes&quot; if such an event occurs, otherwise answer &quot;No&quot;.

&quot;
 &quot;L1_Table&quot;: {
 &quot;Yes&quot;: {
&quot;&lt;L1s with at least one valid L2&gt;&quot;: &quot;&lt;valid answer&gt;&quot;,
....
},
&quot;No&quot;: {
&quot;&lt;L1s with only invalid or missing L2s&gt;&quot;: &quot;&lt;valid answer&gt;&quot;,
....
}
 },
 &quot;L2_Table&quot;: {
 &quot;Yes&quot;: {
 &quot;&lt;L2_ID&gt;&quot;: &quot;&lt;valid answer&gt;&quot;,
 ...
 },
 &quot;No&quot;: {
 &quot;&lt;L2_ID&gt;&quot;: &quot;&lt;description or reason&gt;&quot;,
 ...
 }
 },
&quot;L1_L2_Details&quot; : {
&lt;L1_ID&gt; : &lt;L2_ID&gt;
}
&quot;Agent_Improvement_Insights&quot;: 
 {
 &quot;Opportunity&quot;: &quot;Opportunity Title (e.g. Ensure Complete and Clear Communication)(In Bold) : &lt;Describe the improvement opportunity based on the transcript&gt;&quot;,
 &quot;Recommendation&quot;: &quot;&lt;Give a clear, practical recommendation for the agent to improve&gt;&quot;,
 &quot;Guidance&quot;: 
 &quot;1) Give suggestion 1&quot;,
 &quot;2) Give suggestion 2&quot;,
 &quot;3) Give suggestion 3&quot;
 
 }

&quot;Process_Improvement_Insights&quot;: {
 {
 &quot;Opportunity&quot;: &quot;Opportunity Title (e.g. Standardize Consent Script Procedure)(In Bold) : &lt;Describe the business or process inefficiency revealed in the transcript&gt;&quot;,
 &quot;Recommendation&quot;: &quot;&lt;Give a practical, scalable solution to address it&gt;&quot;,
 &quot;Guidance&quot;: 
 &quot;1) Give suggestion 1&quot;,
 &quot;2) Give suggestion 2&quot;,
 &quot;3) Give suggestion 3&quot;
  
 }
 }

}

#### 5.4: Classify L1_IDs
- If **at least one valid L2_ID** exists, put the L1_ID in:
 ```json
 &quot;L1_Table&quot;: {
 &quot;Yes&quot;: {
 &quot;&lt;L1_ID&gt;&quot;: &quot;&lt;summary or reason&gt;&quot;
 }



</content>
        <inputs>
            <apiName>Prompt_Summary_Setting</apiName>
            <definition>SOBJECT://Prompt_Summary_Setting__c</definition>
            <masterLabel>Prompt Summary Setting</masterLabel>
            <referenceName>Input:Prompt_Summary_Setting</referenceName>
            <required>true</required>
        </inputs>
        <inputs>
            <apiName>CallLog</apiName>
            <definition>SOBJECT://CallLog__c</definition>
            <masterLabel>CallLog</masterLabel>
            <referenceName>Input:CallLog</referenceName>
            <required>true</required>
        </inputs>
        <primaryModel>sfdc_ai__DefaultGPT4OmniMini</primaryModel>
        <status>Published</status>
        <versionIdentifier>Biy+CkWgXwiZwy8Wzk0c37NGyayD90Had1GO19nMETc=_3</versionIdentifier>
    </templateVersions>
    <templateVersions>
        <content>You are an expert contact center analyzer.

You will be given:
- A transcript of a conversation between a customer and an agent:  
 `{!$Input:CallLog.transcript_Desc__c}`

- A call log file name in this format:  
 {!$Input:CallLog.Name}
 Example: `+911234567890_20240701_111510_113010_EmergencyCall`

---

### Step 1: Extract Salesforce metadata fields

From Salesforce, extract and include:
- `&quot;agent_id&quot;`: {!$Input:CallLog.AgentID__r.Id}
- `&quot;client_id&quot;`: `{!$Input:CallLog.Client__r.Id}`
- `&quot;call_id&quot;`: `{!$Input:CallLog.Id}`

---

### Step 2: Extract call metadata from filename

Parse the file name and extract the following fields:
- `&quot;phone_number&quot;` → first section
- `&quot;call_date&quot;` → from second section, formatted as `YYYY-MM-DD`
- `&quot;start_time&quot;` → third section, formatted as `HH:MM:SS`
- `&quot;end_time&quot;` → fourth section, formatted as `HH:MM:SS`
- `&quot;status&quot;` → fifth section
- `&quot;call_duration&quot;` → time difference between `end_time` and `start_time` in `X minutes Y seconds` format
- &apos;&apos;Quality_of_Call&apos;&apos; - analyze the Transcript and refer a quality of call rating depending on the customer satisfaction it should be out of 10 [ example : &apos;9&apos; or &apos;10&apos; or others]

---

### Step 3: Agent Improvement Analysis

Please analysis the prompt from - {!$Input:Prompt_Summary_Setting.Summary_Text__c} and then find &apos;Agent Strengths and Development Needs:&apos; prompt and find the L2 prompts related to this and then generate &quot;Agent_Improvement_Insights&quot; in the output JSON if find multiple &quot;Agent_Improvement_Insights&quot; merge all and make it ones

---

### Step 4: Process Improvement Analysis

Please analysis the prompt from - {!$Input:Prompt_Summary_Setting.Summary_Text__c} and then find &apos;Automation Opportunities:&apos; prompt and find the L2 prompts related to this and then generate &quot;Process_Improvement_Insights&quot; in the output JSON if find multiple &quot;Process_Improvement_Insights&quot; merge all and make it ones

---
### Step 5: Analyze transcript and categorize L1/L2 prompts

You will be given predefined L1 and L2 category mappings here:  
➡️ `{!$Input:Prompt_Summary_Setting.Summary_Text__c}`

#### 5.1: Identify all relevant L1_IDs discussed in the transcript.
#### 5.2: Always include &apos;3&apos;, &apos;18&apos;, &apos;19&apos;, &apos;25&apos;, &apos;26&apos;, &apos;39&apos;, &apos;59&apos;` L2_Ids in the &quot;L2 table&quot; &quot;Yes&quot; section and in each time those should be included.... also add the related L1_Ids in the &apos;L1 Table&apos;
#### 5.3: For each L1_ID:
- Identify all associated L2_IDs
- For each L2_ID:
 - If the answer is valid and mentioned in the conversation (not `&quot;No&quot;`, `&quot;null&quot;`, or missing), include it and give a proper answer by analyzing from the transcript in the bellow json and in the &quot;L1_L2_Details&quot; table there should be all L2 answers from the &quot;L2_Table&quot;-&quot;Yes&quot; section and include those with their related L1 prompt (Example - If there are 01, 02, 03 L2 prompt found in the &quot;L2_Table&quot; &quot;Yes&quot; section for that add them Like &quot;P1&quot;: &quot;01&quot;,&quot;P1&quot;: &quot;02&quot;,&quot;P1&quot;: &quot;03&quot; etc ) in the &quot;L1_L2_Details&quot; section there should be same no of records presents in the &quot;L2_Table&quot; - &quot;Yes&quot; Section:
 ```json
{
 &quot;client_id&quot;: &quot;&lt;client_id_from_Salesforce&gt;&quot;,
 &quot;agent_id&quot;: &quot;&lt;agent_id_from_Salesforce&gt;&quot;,
 &quot;call_id&quot;: &quot;&lt;call_id_from_Salesforce&gt;&quot;,
&quot;phone_number&quot;` → first section
&quot;call_date&quot;` → from second section, formatted as `YYYY-MM-DD`
&quot;start_time&quot;` → third section, formatted as `HH:MM:SS`
 &quot;end_time&quot;` → fourth section, formatted as `HH:MM:SS`
&quot;status&quot;` → fifth section
&quot;call_duration&quot;` → time difference between `end_time` and `start_time` in `X minutes Y seconds` format
&apos;&apos;Quality_of_Call&apos;&apos; - analyze the Transcript and refer a quality of call rating depending on the customer satisfaction it should be out of 10 [ example : &apos;9&apos; or &apos;10&apos; or others],
&quot;CallType&quot; - &quot;From the transcript decide &apos;Inbound&apos; or &apos;Outbound&apos;.
 Rules:
If the very first speaker is the agent/representative (they greet, ask for the client, introduce themselves, or mention their hospital/company), then output: &quot;Outbound&quot;.
If the very first speaker is the client/patient (they greet first, ask a question, or introduce themselves), then output: &quot;Inbound&quot;.&quot;



&quot;Category&quot; - &quot;Analyze and check the Category of the call it should be from the picklist values - &quot;Appointment Related&quot;, &quot;Billing &amp; Insurance&quot;, &quot;Test &amp; Reports&quot;, &quot;Emergency Services&quot;, &quot;Patient Support / Feedback&quot;, &quot;General Information&quot;, &quot;Department / Sector Inquiry&quot;(If the category is not found put as - &quot;General Information&quot;)


&quot;Test_Report_H&quot; - Analyze the call transcript and determine the Test Report values from this multi select picklist:
 {&quot;Blood Test&quot;, &quot;Urine Test&quot;, &quot;X-Ray&quot;, &quot;MRI&quot;, &quot;CT Scan&quot;, &quot;Ultrasound&quot;, &quot;ECG / ECHO&quot;, &quot;Biopsy&quot;, &quot;Covid-19 Report&quot;, &quot;Not Mentioned&quot;}.
Rules:
Always return the result as a valid JSON object with the key Test_Report_H.
If multiple reports are found, include all of them separated by commas (example: &quot;MRI ; Ultrasound&quot;).
If no report type is found in the transcript, return &quot;Not Mentioned&quot;.


&quot;Sector_Type_H&quot; - Analyze the call transcript, determine the Sector Type it should be from the picklist values - &quot;General Physician&quot;, &quot;Orthopedic&quot;, &quot;Cardiology&quot;, &quot;Neurology&quot;, &quot;Gynecology&quot;, &quot;Pediatrics&quot;, &quot;Oncology&quot;, &quot;Dermatology&quot;, &quot;ENT (Ear, Nose, Throat)&quot;, &quot;Psychiatry&quot;, &quot;Emergency&quot; (If the category is not found put as - &quot;General Physician&quot;)


&quot;Patient_Age_H&quot; - Analyze the call transcript, determine the Patient Age it should be from the picklist values &quot;&lt; 1 year&quot;, &quot;01 – 12 years&quot;, &quot;13 – 19 years&quot;, &quot;20 – 39 years&quot;, &quot;40 – 59 years&quot;, &quot;60 – 79 years&quot;, &quot;80+ years&quot;, &quot;Not Mentioned&quot; (If the category is not found put as - &quot;Not Mentioned&quot;)

&quot;Need_Escalation&quot; - &quot;From the call transcript, identify if the call led to any escalation or not, give the answer as &quot;Yes&quot; or &quot;No&quot;&quot;

&quot;Call_Satisfied&quot; - &quot;From the call transcript, identify if the the client is satisfied, partially satisfied or not satisfied, give the answer as &quot;Yes&quot; or &quot;Partially&quot; or &quot;No&quot;&quot;

&quot;Call_Put_On_Hold&quot; - From the call transcript, determine if at any point the agent puts the customer on hold, asks them to wait, OR implies a pause to check something and then return, even if words like &quot;hold&quot; or &quot;wait&quot; are not explicitly used. This includes implied holds such as: &quot;আমি চেক করে আসছি&quot;, &quot;let me check and get back&quot;, &quot;checking the availability&quot;, &quot;thank you for holding&quot;, or any statement where the agent temporarily suspends the conversation to verify something. Answer only &quot;Yes&quot; if such an event occurs, otherwise answer &quot;No&quot;.

&quot;
 &quot;L1_Table&quot;: {
 &quot;Yes&quot;: {
&quot;&lt;L1s with at least one valid L2&gt;&quot;: &quot;&lt;valid answer&gt;&quot;,
....
},
&quot;No&quot;: {
&quot;&lt;L1s with only invalid or missing L2s&gt;&quot;: &quot;&lt;valid answer&gt;&quot;,
....
}
 },
 &quot;L2_Table&quot;: {
 &quot;Yes&quot;: {
 &quot;&lt;L2_ID&gt;&quot;: &quot;&lt;valid answer&gt;&quot;,
 ...
 },
 &quot;No&quot;: {
 &quot;&lt;L2_ID&gt;&quot;: &quot;&lt;description or reason&gt;&quot;,
 ...
 }
 },
&quot;L1_L2_Details&quot; : {
&lt;L1_ID&gt; : &lt;L2_ID&gt;
}
&quot;Agent_Improvement_Insights&quot;: 
 {
 &quot;Opportunity&quot;: &quot;Opportunity Title (e.g. Ensure Complete and Clear Communication)(In Bold) : &lt;Describe the improvement opportunity based on the transcript&gt;&quot;,
 &quot;Recommendation&quot;: &quot;&lt;Give a clear, practical recommendation for the agent to improve&gt;&quot;,
 &quot;Guidance&quot;: 
 &quot;1) Give suggestion 1&quot;,
 &quot;2) Give suggestion 2&quot;,
 &quot;3) Give suggestion 3&quot;
 
 }

&quot;Process_Improvement_Insights&quot;: {
 {
 &quot;Opportunity&quot;: &quot;Opportunity Title (e.g. Standardize Consent Script Procedure)(In Bold) : &lt;Describe the business or process inefficiency revealed in the transcript&gt;&quot;,
 &quot;Recommendation&quot;: &quot;&lt;Give a practical, scalable solution to address it&gt;&quot;,
 &quot;Guidance&quot;: 
 &quot;1) Give suggestion 1&quot;,
 &quot;2) Give suggestion 2&quot;,
 &quot;3) Give suggestion 3&quot;
  
 }
 }

}

#### 5.4: Classify L1_IDs
- If **at least one valid L2_ID** exists, put the L1_ID in:
 ```json
 &quot;L1_Table&quot;: {
 &quot;Yes&quot;: {
 &quot;&lt;L1_ID&gt;&quot;: &quot;&lt;summary or reason&gt;&quot;
 }



</content>
        <inputs>
            <apiName>Prompt_Summary_Setting</apiName>
            <definition>SOBJECT://Prompt_Summary_Setting__c</definition>
            <masterLabel>Prompt Summary Setting</masterLabel>
            <referenceName>Input:Prompt_Summary_Setting</referenceName>
            <required>true</required>
        </inputs>
        <inputs>
            <apiName>CallLog</apiName>
            <definition>SOBJECT://CallLog__c</definition>
            <masterLabel>CallLog</masterLabel>
            <referenceName>Input:CallLog</referenceName>
            <required>true</required>
        </inputs>
        <primaryModel>sfdc_ai__DefaultGPT4OmniMini</primaryModel>
        <status>Published</status>
        <versionIdentifier>Biy+CkWgXwiZwy8Wzk0c37NGyayD90Had1GO19nMETc=_4</versionIdentifier>
    </templateVersions>
    <templateVersions>
        <content>You are an expert contact center analyzer.

You will be given:
- A transcript of a conversation between a customer and an agent:  
 `{!$Input:CallLog.transcript_Desc__c}`

- A call log file name in this format:  
 {!$Input:CallLog.Name}
 Example: `+911234567890_20240701_111510_113010_EmergencyCall`

---

### Step 1: Extract Salesforce metadata fields

From Salesforce, extract and include:
- `&quot;agent_id&quot;`: {!$Input:CallLog.AgentID__r.Id}
- `&quot;client_id&quot;`: `{!$Input:CallLog.Client__r.Id}`
- `&quot;call_id&quot;`: `{!$Input:CallLog.Id}`

---

### Step 2: Extract call metadata from filename

Parse the file name and extract the following fields:
- `&quot;phone_number&quot;` → first section
- `&quot;call_date&quot;` → from second section, formatted as `YYYY-MM-DD`
- `&quot;start_time&quot;` → third section, formatted as `HH:MM:SS`
- `&quot;end_time&quot;` → fourth section, formatted as `HH:MM:SS`
- `&quot;status&quot;` → fifth section
- `&quot;call_duration&quot;` → time difference between `end_time` and `start_time` in `X minutes Y seconds` format
- &apos;&apos;Quality_of_Call&apos;&apos; - analyze the Transcript and refer a quality of call rating depending on the customer satisfaction it should be out of 10 [ example : &apos;9&apos; or &apos;10&apos; or others]

---

### Step 3: Agent Improvement Analysis

Please analysis the prompt from - {!$Input:Prompt_Summary_Setting.Summary_Text__c} and then find &apos;Agent Strengths and Development Needs:&apos; prompt and find the L2 prompts related to this and then generate &quot;Agent_Improvement_Insights&quot; in the output JSON if find multiple &quot;Agent_Improvement_Insights&quot; merge all and make it ones

---

### Step 4: Process Improvement Analysis

Please analysis the prompt from - {!$Input:Prompt_Summary_Setting.Summary_Text__c} and then find &apos;Automation Opportunities:&apos; prompt and find the L2 prompts related to this and then generate &quot;Process_Improvement_Insights&quot; in the output JSON if find multiple &quot;Process_Improvement_Insights&quot; merge all and make it ones

---
### Step 5: Analyze transcript and categorize L1/L2 prompts

You will be given predefined L1 and L2 category mappings here:  
➡️ `{!$Input:Prompt_Summary_Setting.Summary_Text__c}`

#### 5.1: Identify all relevant L1_IDs discussed in the transcript.
#### 5.2: Always include &apos;3&apos;, &apos;18&apos;, &apos;19&apos;, &apos;25&apos;, &apos;26&apos;, &apos;39&apos;, &apos;59&apos;` L2_Ids in the &quot;L2 table&quot; &quot;Yes&quot; section and in each time those should be included.... also add the related L1_Ids in the &apos;L1 Table&apos;
#### 5.3: For each L1_ID:
- Identify all associated L2_IDs
- For each L2_ID:
 - If the answer is valid and mentioned in the conversation (not `&quot;No&quot;`, `&quot;null&quot;`, or missing), include it and give a proper answer by analyzing from the transcript in the bellow json and in the &quot;L1_L2_Details&quot; table there should be all L2 answers from the &quot;L2_Table&quot;-&quot;Yes&quot; section and include those with their related L1 prompt (Example - If there are 01, 02, 03 L2 prompt found in the &quot;L2_Table&quot; &quot;Yes&quot; section for that add them Like &quot;P1&quot;: &quot;01&quot;,&quot;P1&quot;: &quot;02&quot;,&quot;P1&quot;: &quot;03&quot; etc ) in the &quot;L1_L2_Details&quot; section there should be same no of records presents in the &quot;L2_Table&quot; - &quot;Yes&quot; Section:
 ```json
{
 &quot;client_id&quot;: &quot;&lt;client_id_from_Salesforce&gt;&quot;,
 &quot;agent_id&quot;: &quot;&lt;agent_id_from_Salesforce&gt;&quot;,
 &quot;call_id&quot;: &quot;&lt;call_id_from_Salesforce&gt;&quot;,
&quot;phone_number&quot;` → first section
&quot;call_date&quot;` → from second section, formatted as `YYYY-MM-DD`
&quot;start_time&quot;` → third section, formatted as `HH:MM:SS`
 &quot;end_time&quot;` → fourth section, formatted as `HH:MM:SS`
&quot;status&quot;` → fifth section
&quot;call_duration&quot;` → time difference between `end_time` and `start_time` in `X minutes Y seconds` format
&apos;&apos;Quality_of_Call&apos;&apos; - analyze the Transcript and refer a quality of call rating depending on the customer satisfaction it should be out of 10 [ example : &apos;9&apos; or &apos;10&apos; or others],
&quot;CallType&quot; - &quot;From the transcript decide &apos;Inbound&apos; or &apos;Outbound&apos;.
 Rules:
If the very first speaker is the agent/representative (they greet, ask for the client, introduce themselves, or mention their hospital/company), then output: &quot;Outbound&quot;.
If the very first speaker is the client/patient (they greet first, ask a question, or introduce themselves), then output: &quot;Inbound&quot;.&quot;



&quot;Category&quot; - &quot;Analyze and check the Category of the call it should be from the picklist values - &quot;Appointment Related&quot;, &quot;Billing &amp; Insurance&quot;, &quot;Test &amp; Reports&quot;, &quot;Emergency Services&quot;, &quot;Patient Support / Feedback&quot;, &quot;General Information&quot;, &quot;Department / Sector Inquiry&quot;, &quot;Insurance Benefit Clarification&quot;(If the category is not found put as - &quot;General Information&quot;)


&quot;Test_Report_H&quot; - Analyze the call transcript and determine the Test Report values from this multi select picklist:
 {&quot;Blood Test&quot;, &quot;Urine Test&quot;, &quot;X-Ray&quot;, &quot;MRI&quot;, &quot;CT Scan&quot;, &quot;Ultrasound&quot;, &quot;ECG / ECHO&quot;, &quot;Biopsy&quot;, &quot;Covid-19 Report&quot;, &quot;Not Mentioned&quot;}.
Rules:
Always return the result as a valid JSON object with the key Test_Report_H.
If multiple reports are found, include all of them separated by commas (example: &quot;MRI ; Ultrasound&quot;).
If no report type is found in the transcript, return &quot;Not Mentioned&quot;.


&quot;Sector_Type_H&quot; - Analyze the call transcript, determine the Sector Type it should be from the picklist values - &quot;General Physician&quot;, &quot;Orthopedic&quot;, &quot;Cardiology&quot;, &quot;Neurology&quot;, &quot;Gynecology&quot;, &quot;Pediatrics&quot;, &quot;Oncology&quot;, &quot;Dermatology&quot;, &quot;ENT (Ear, Nose, Throat)&quot;, &quot;Psychiatry&quot;, &quot;Emergency&quot; (If the category is not found put as - &quot;General Physician&quot;)


&quot;Patient_Age_H&quot; - Analyze the call transcript, determine the Patient Age it should be from the picklist values &quot;&lt; 1 year&quot;, &quot;01 – 12 years&quot;, &quot;13 – 19 years&quot;, &quot;20 – 39 years&quot;, &quot;40 – 59 years&quot;, &quot;60 – 79 years&quot;, &quot;80+ years&quot;, &quot;Not Mentioned&quot; (If the category is not found put as - &quot;Not Mentioned&quot;)

&quot;Need_Escalation&quot; - &quot;From the call transcript, identify if the call led to any escalation or not, give the answer as &quot;Yes&quot; or &quot;No&quot;&quot;

&quot;Call_Satisfied&quot; - &quot;From the call transcript, identify if the the client is satisfied, partially satisfied or not satisfied, give the answer as &quot;Yes&quot; or &quot;Partially&quot; or &quot;No&quot;&quot;

&quot;Call_Put_On_Hold&quot; - From the call transcript, determine if at any point the agent puts the customer on hold, asks them to wait, OR implies a pause to check something and then return, even if words like &quot;hold&quot; or &quot;wait&quot; are not explicitly used. This includes implied holds such as: &quot;আমি চেক করে আসছি&quot;, &quot;let me check and get back&quot;, &quot;checking the availability&quot;, &quot;thank you for holding&quot;, or any statement where the agent temporarily suspends the conversation to verify something. Answer only &quot;Yes&quot; if such an event occurs, otherwise answer &quot;No&quot;.

&quot;
 &quot;L1_Table&quot;: {
 &quot;Yes&quot;: {
&quot;&lt;L1s with at least one valid L2&gt;&quot;: &quot;&lt;valid answer&gt;&quot;,
....
},
&quot;No&quot;: {
&quot;&lt;L1s with only invalid or missing L2s&gt;&quot;: &quot;&lt;valid answer&gt;&quot;,
....
}
 },
 &quot;L2_Table&quot;: {
 &quot;Yes&quot;: {
 &quot;&lt;L2_ID&gt;&quot;: &quot;&lt;valid answer&gt;&quot;,
 ...
 },
 &quot;No&quot;: {
 &quot;&lt;L2_ID&gt;&quot;: &quot;&lt;description or reason&gt;&quot;,
 ...
 }
 },
&quot;L1_L2_Details&quot; : {
&lt;L1_ID&gt; : &lt;L2_ID&gt;
}
&quot;Agent_Improvement_Insights&quot;: 
 {
 &quot;Opportunity&quot;: &quot;Opportunity Title (e.g. Ensure Complete and Clear Communication)(In Bold) : &lt;Describe the improvement opportunity based on the transcript&gt;&quot;,
 &quot;Recommendation&quot;: &quot;&lt;Give a clear, practical recommendation for the agent to improve&gt;&quot;,
 &quot;Guidance&quot;: 
 &quot;1) Give suggestion 1&quot;,
 &quot;2) Give suggestion 2&quot;,
 &quot;3) Give suggestion 3&quot;
 
 }

&quot;Process_Improvement_Insights&quot;: {
 {
 &quot;Opportunity&quot;: &quot;Opportunity Title (e.g. Standardize Consent Script Procedure)(In Bold) : &lt;Describe the business or process inefficiency revealed in the transcript&gt;&quot;,
 &quot;Recommendation&quot;: &quot;&lt;Give a practical, scalable solution to address it&gt;&quot;,
 &quot;Guidance&quot;: 
 &quot;1) Give suggestion 1&quot;,
 &quot;2) Give suggestion 2&quot;,
 &quot;3) Give suggestion 3&quot;
  
 }
 }

}

#### 5.4: Classify L1_IDs
- If **at least one valid L2_ID** exists, put the L1_ID in:
 ```json
 &quot;L1_Table&quot;: {
 &quot;Yes&quot;: {
 &quot;&lt;L1_ID&gt;&quot;: &quot;&lt;summary or reason&gt;&quot;
 }



</content>
        <inputs>
            <apiName>Prompt_Summary_Setting</apiName>
            <definition>SOBJECT://Prompt_Summary_Setting__c</definition>
            <masterLabel>Prompt Summary Setting</masterLabel>
            <referenceName>Input:Prompt_Summary_Setting</referenceName>
            <required>true</required>
        </inputs>
        <inputs>
            <apiName>CallLog</apiName>
            <definition>SOBJECT://CallLog__c</definition>
            <masterLabel>CallLog</masterLabel>
            <referenceName>Input:CallLog</referenceName>
            <required>true</required>
        </inputs>
        <primaryModel>sfdc_ai__DefaultGPT4OmniMini</primaryModel>
        <status>Published</status>
        <versionIdentifier>Biy+CkWgXwiZwy8Wzk0c37NGyayD90Had1GO19nMETc=_5</versionIdentifier>
    </templateVersions>
    <type>einstein_gpt__flex</type>
    <visibility>Global</visibility>
</GenAiPromptTemplate>
